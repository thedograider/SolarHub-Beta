local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
warn("loading...")

local Window = Rayfield:CreateWindow({
    Name = "SolarHub",
    LoadingTitle = "Loading SolarHub v1.0",
    LoadingSubtitle = "By thedograider",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Set a folder name for configs
        FileName = "SolarHub"
    },
    Discord = {
        Enabled = false,
        Invite = "", -- Discord invite code, leave empty if not used
        RememberJoins = true
    },
    KeySystem = false, -- Disable the key system
})
print("SolarHub Loaded!")
-- Main Tab
local MainTab = Window:CreateTab("Words", 4483362458) -- Tab with an icon

local ReplicatedStorage = game.ReplicatedStorage
local TextChatService = game.TextChatService
local UserInputService = game.UserInputService
local player = game.Players.LocalPlayer
local bypassText = ""
local safeBool = false
local chatBool = true
local autoBool = false
local tagBool = false
local jerkBool = false
local fixBool = true

MainTab:CreateLabel("Welcome to SolarHub, the ultimate bypasser!")
MainTab:CreateLabel("set your roblox's lenguage to Slovenski or else some buttons may tag")
MainTab:CreateLabel("dont't spam!")
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ḍịṣc̣ọṛḍ.ɢɢ/cḌṾẈḅḄḍṂḌe for the best bypasser ever!")

local StandardMethod = {
    a = "a", b = "b", c = "c", d = "d", e = "e", f = "f", g = "g", h = "h",
    i = "i", j = "j", k = "k", l = "l", m = "m", n = "n", o = "o", p = "p",
    q = "q", r = "r", s = "s", t = "t", u = "u", v = "v", w = "w", x = "x",
    y = "y", z = "z", A = "A", B = "B", C = "C", D = "D", E = "E", F = "F",
    G = "G̣", H = "H", I = "I", J = "J", K = "K", L = "L", M = "M", N = "N",
    O = "O", P = "P", Q = "Q", R = "R", S = "S", T = "T", U = "U", V = "V",
    W = "W", X = "X", Y = "Y", Z = "Z"
}

local function bypassMessage(message)
    local selectedMapping = StandardMethod
    local bypassedMessage = ""
    local wordCount = 0
    
    for i = 1, #message do
        local char = message:sub(i, i)
        bypassedMessage = bypassedMessage .. (selectedMapping[char] or char)
        
        if char == " " then
            wordCount = wordCount + 1
            if wordCount % 6 == 0 then
                bypassedMessage = bypassedMessage .. " "
            end
        end
    end

    bypassedMessage = bypassedMessage:gsub("rape", function()
        return 'rap̣e'
    end)

    bypassedMessage = bypassedMessage:gsub("raping", function()
        return 'rapı̇ng'
    end)

    bypassedMessage = bypassedMessage:gsub("rapist", function()
        return 'rapı̇st'
    end)

    bypassedMessage = bypassedMessage:gsub(" ", function()
        return math.random(2) == 7 and "" or "" or ""
    end)

    local actualWordCount = 0
    bypassedMessage = bypassedMessage:gsub("[]", function(fakeSpace)
        actualWordCount = actualWordCount + 1
        if actualWordCount % 7 == 0 then
            return " "
        else
            return fakeSpace
        end
    end)

    bypassedMessage = bypassedMessage:gsub("nigger", function()
        return 'nı̇gger'
    end)

    bypassedMessage = bypassedMessage:gsub("nigga", function()
        return 'nı̇gga'
    end)

    bypassedMessage = bypassedMessage:gsub("bitch", function()
        return 'bı̇tch'
    end)

    bypassedMessage = bypassedMessage:gsub("fucking", function()
        return 'fuckin'
    end)

    bypassedMessage = bypassedMessage:gsub("fucking", function()
        return 'p̣enı̇s'
    end)

    bypassedMessage = bypassedMessage:gsub("pussy", function()
        return 'p̣ussy'
    end)

    bypassedMessage = bypassedMessage:gsub("retard", function()
        return 'ṛetard'
    end)

    bypassedMessage = bypassedMessage:gsub("motherfucker", function()
        return 'motheṛfuckeṛ'
    end)

    bypassedMessage = bypassedMessage:gsub("fucker", function()
        return 'fuckeṛ'
    end)

    bypassedMessage = bypassedMessage:gsub("cock", function()
        return 'c̣ock'
    end)

    bypassedMessage = bypassedMessage:gsub("dick", function()
        return 'dı̇ck'
    end)

    bypassedMessage = bypassedMessage:gsub("porn", function()
        return 'p̣orn'
    end)

    bypassedMessage = bypassedMessage:gsub("discord", function()
        return 'dı̇scord'
    end)

    bypassedMessage = bypassedMessage:gsub("sex", function()
        return 'ṡex'
    end)

    bypassedMessage = bypassedMessage:gsub("SEX",function()
        return 'ṠEX'
    end)

    bypassedMessage = bypassedMessage:gsub("penis",function()
        return 'penı̇s'
    end)

    bypassedMessage = bypassedMessage:gsub("faggot", function()
        return 'fạggot'
    end)

    -- bypassedMessage = "󠀀" .. bypassedMessage .. "󠀀"

    return bypassedMessage
end

local fixBypasses = function()
    local function generateString(length)
        local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local generatedString = ""
        
        for i = 1, length do
            local randomIndex = math.random(1, #chars)
            generatedString = generatedString .. chars:sub(randomIndex, randomIndex)
        end
        
        return generatedString
    end

    local messageSent = game.Players:Chat("/e " .. generateString(85))

    print(tostring(messageSent))
end

local sendMessage = function(message)
    local Chat = game.Chat
    local success, filteredMessage = pcall(function()
        return Chat:FilterStringForBroadcast(message, player)
    end)

    if not success then
        warn("Filtering failed. Proceeding without tag detection.")
        filteredMessage = message
    end

    local function normalizeString(str)
        return str:gsub("%s+", ""):lower()
    end

    local isTagged = normalizeString(filteredMessage) ~= normalizeString(message)

    if TextChatService then
        local textChannels = TextChatService:FindFirstChild("TextChannels")
        if textChannels then
            local textChannel = textChannels:WaitForChild("RBXGeneral")
            if textChannel then
                if tagBool and isTagged then
                    textChannel:DisplaySystemMessage('<font color="#FF7F50">[SolarHub] Detected tags!</font>')
                elseif fixBool and isTagged then
                    textChannel:SendAsync(message)
                    fixBypasses()
                else
                    textChannel:SendAsync(message)
                end
                return
            else
                warn("No suitable text channel found in TextChatService. Falling back to legacy chat.")
                if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                    if tagBool and isTagged then
                        warn("Message got tagged. You're welcome.")
                        game.StarterGui:SetCore("ChatMakeSystemMessage", {
                            Text = "[SolarHub] Detected tags!",
                            Color = Color3.fromRGB(255, 127, 80)
                        })
                    elseif fixBool and isTagged then
                        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                        fixBypasses()
                    else
                        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    end
                else
                    warn("Legacy chat events are not available.")
                end
            end
        else
            warn("TextChannels not found in TextChatService. Falling back to legacy chat.")
            if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                if tagBool and isTagged then
                    warn("Message got tagged. You're welcome.")
                    game.StarterGui:SetCore("ChatMakeSystemMessage", {
                        Text = "[SolarHub] Detected tags!",
                        Color = Color3.fromRGB(255, 127, 80)
                    })
                elseif fixBool and isTagged then
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    fixBypasses()
                else
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                end
            else
                warn("Legacy chat events are not available.")
            end
        end
    elseif ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
        if tagBool and isTagged then
            warn("Message got tagged. You're welcome.")
            game.StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = "[SolarHub] Detected tags!",
                Color = Color3.fromRGB(255, 127, 80)
            })
        elseif fixBool and isTagged then
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
            fixBypasses()
        else
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
        end
    else
        warn("Legacy chat events are not available.")
    end
end

local function normalizeString(str)
    return str:gsub("%s+", ""):lower()
end

local AutoBypassToggle = MainTab:CreateToggle({
    Name = "[TCS] Auto Bypass",
    CurrentValue = false,
    Flag = "AutoBypassToggle",
    Callback = function(Value)
        autoBool = Value

        if autoBool then
            if TextChatService then
                local textChannels = TextChatService:FindFirstChild("TextChannels")
                if textChannels then
                    local textChannel = textChannels:WaitForChild("RBXGeneral")
                    if textChannel then
                        TextChatService.OnIncomingMessage = function(message)
                            if message.TextSource.UserId == player.UserId then
                                local Chat = game.Chat
                                local bypassedMessage = bypassMessage(message.Text)

                                local success, filteredMessage = pcall(function()
                                    return Chat:FilterStringForBroadcast(bypassedMessage, player)
                                end)

                                if not success then
                                    warn("Filtering failed. Proceeding without tag detection.")
                                    filteredMessage = message.Text
                                end

                                local isTagged = normalizeString(tostring(filteredMessage)) ~= normalizeString(tostring(bypassedMessage))

                                if tagBool and isTagged then
                                    warn("Message got tagged. You're welcome.")
                                    local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                                    if channel then
                                        channel:DisplaySystemMessage('<font color="#FF7F50">[SolarHub] Detected tags!</font>')
                                    end
                                    message.Text = ''
                                else
                                    message.Text = bypassedMessage
                                end
                            end
                        end
                    end
                else
                    Rayfield:Notify({
                        Title = "Legacy Chat",
                        Content = "Auto bypass is not supported for legacy chat.",
                        Duration = 6.5,
                        Image = 4483362458
                    })
                end
            end
        end
    end
})

MainTab:CreateButton({
    Name = "Fix Bypasses",
  Callback = function()
      print("Fix Bypasses functionality executed!")
      game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("/e 8qwhf7e21989g89218gh82918g")
  end,
})

MainTab:CreateToggle({
    Name = "Autofix",
    CurrentValue = false, -- Default state: disabled
    Flag = "AutofixToggle",
    Callback = function(Value)
        fixBool = Value -- Update the fixBool to toggle Autofix
        if fixBool then
            print("Autofix is enabled. Fix will be applied automatically.")
        else
            print("Autofix is disabled.")
        end
    end,
})

-- Modify the existing `sendMessage` function to integrate Autofix
local sendMessage = function(message)
    local Chat = game.Chat
    local success, filteredMessage = pcall(function()
        return Chat:FilterStringForBroadcast(message, player)
    end)

    if not success then
        warn("Filtering failed. Proceeding without tag detection.")
        filteredMessage = message
    end

    local function normalizeString(str)
        return str:gsub("%s+", ""):lower()
    end

    local isTagged = normalizeString(filteredMessage) ~= normalizeString(message)

    if TextChatService then
        local textChannels = TextChatService:FindFirstChild("TextChannels")
        if textChannels then
            local textChannel = textChannels:WaitForChild("RBXGeneral")
            if textChannel then
                if tagBool and isTagged then
                    textChannel:DisplaySystemMessage('<font color="#FF7F50">[SolarHub] Detected tags!</font>')
                elseif fixBool and isTagged then
                    textChannel:SendAsync(message)
                    fixBypasses() -- Automatically apply fix when Autofix is enabled
                else
                    textChannel:SendAsync(message)
                end
                return
            else
                warn("No suitable text channel found in TextChatService. Falling back to legacy chat.")
                if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                    if tagBool and isTagged then
                        warn("Message got tagged. You're welcome.")
                        game.StarterGui:SetCore("ChatMakeSystemMessage", {
                            Text = "[SolarHub] Detected tags!",
                            Color = Color3.fromRGB(255, 127, 80)
                        })
                    elseif fixBool and isTagged then
                        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                        fixBypasses() -- Automatically apply fix when Autofix is enabled
                    else
                        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    end
                else
                    warn("Legacy chat events are not available.")
                end
            end
        else
            warn("TextChannels not found in TextChatService. Falling back to legacy chat.")
            if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                if tagBool and isTagged then
                    warn("Message got tagged. You're welcome.")
                    game.StarterGui:SetCore("ChatMakeSystemMessage", {
                        Text = "[SolarHub] Detected tags!",
                        Color = Color3.fromRGB(255, 127, 80)
                    })
                elseif fixBool and isTagged then
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    fixBypasses() -- Automatically apply fix when Autofix is enabled
                else
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                end
            else
                warn("Legacy chat events are not available.")
            end
        end
    elseif ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
        if tagBool and isTagged then
            warn("Message got tagged. You're welcome.")
            game.StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = "[SolarHub] Detected tags!",
                Color = Color3.fromRGB(255, 127, 80)
            })
        elseif fixBool and isTagged then
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
            fixBypasses() -- Automatically apply fix when Autofix is enabled
        else
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
        end
    else
        warn("Legacy chat events are not available.")
    end
end


--[[
MainTab:CreateButton({
      Name = "GangRape",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("GangRape")
    end,
})

MainTab:CreateButton({
    Name = "Rape",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ṛape")
    end,
})

MainTab:CreateButton({
    Name = "Fuck",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ꜰuck")
    end,
})

MainTab:CreateButton({
    Name = "stfu",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("STꜰU")
    end,
})


MainTab:CreateButton({
    Name = "cum",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("cum")
    end,
})

MainTab:CreateButton({
    Name = "skibidicum",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("skibidicum")
    end,
})

MainTab:CreateButton({
    Name = "CUMBUCKET",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("CUMBUCKET")
    end,
})

MainTab:CreateButton({
    Name = "tf",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("tf")
    end,
})

MainTab:CreateButton({
    Name = "thight",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("thight")
    end,
})

MainTab:CreateButton({
    Name = "doggystyle",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("doggystyIe")
    end,
})

MainTab:CreateButton({
    Name = "Sex",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ṣẹx̣")
    end,
})

MainTab:CreateButton({
    Name = "Blowjob",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("BIowjob")
    end,
})

MainTab:CreateButton({
    Name = "Gay",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Gay")
    end,
})

MainTab:CreateButton({
    Name = "Megafuck",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("megaf̣uck")
    end,
})

MainTab:CreateButton({
    Name = "HENTAI",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("HENTAl")
    end,
})

MainTab:CreateButton({
    Name = "slow ass",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("slowass")
    end,
})

MainTab:CreateButton({
    Name = "sexGPT",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ṣexGPT")
    end,
})

MainTab:CreateButton({
    Name = "sped",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ṣp̣ed")
    end,
})

MainTab:CreateButton({
    Name = "FUCKING",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("FUCKlNG")
    end,
})

MainTab:CreateButton({
    Name = "bitch",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ḅịṭch")
    end,
})

MainTab:CreateButton({
    Name = "retard",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ṛeṭarḍ")
    end,
})
local PhrasesTab = Window:CreateTab("Phrases", 4483362458)

PhrasesTab:CreateButton({
    Name = "I GTG SHIT HOLD ON",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("I GTG SHlT HOLD ON")
    end,
})

PhrasesTab:CreateButton({
    Name = "what the retarded gang",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("what the ṛeṭarḍed gang")
    end,
})

PhrasesTab:CreateButton({
    Name = "i got ur IP lil bro",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("i got ur lP lil bro")
    end,
})

PhrasesTab:CreateButton({
    Name = "FINGER ME",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("FlNGER ME")
    end,
})

PhrasesTab:CreateButton({
    Name = "bitch shut the hell up",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ḅịṭch shut the hell up")
    end,
})

PhrasesTab:CreateButton({
    Name = "i love your thights",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("i love your thights")
    end,
})

PhrasesTab:CreateButton({
    Name = "bitch wth are u doing",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ḅịṭch wth are you doing")
    end,
})

PhrasesTab:CreateButton({
    Name = "Dangg, you look so sexy today!",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Dangg, you look so ṣẹx̣y today!")
    end,
})

PhrasesTab:CreateButton({
    Name = "this guy is getting 100% raped tonight",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("this guy is getting 100% ṛaped tonight")
    end,
})

PhrasesTab:CreateButton({
    Name = "are you retarded lol",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("are you ṛeṭarḍed lol")
    end,
})

PhrasesTab:CreateButton({
    Name = "dang that titties beautiful",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("dang that ṭịṭṭịẹṣ beautiful")
    end,
})

PhrasesTab:CreateButton({
    Name = "drown me in boobs!",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("drown me in ḅooḅs!")
    end,
})

PhrasesTab:CreateButton({
    Name = "IM SO FUCKING HARD RN",
    Callback = function()
        print("I GTG SHIT HOLD ON ")
       game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("İM ṠO ḞU̇CK̇lNĠ HARD ṘN")
    end,
})

PhrasesTab:CreateButton({
    Name = "I love minors",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("i Iove MlNORS")
    end,
})

PhrasesTab:CreateButton({
    Name = "Lets go cumlandia!",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Lets go cumlandia!")
    end,
})

PhrasesTab:CreateButton({
    Name = "i need a slave",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("i need a sIave")
    end,
})

PhrasesTab:CreateButton({
    Name = "selling slaves for free!",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("selling sIaves for free!")
    end,
})

PhrasesTab:CreateButton({
    Name = "wanna start selling crack",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("wanna start selling c̣ṛạc̣ḳ")
    end,
})

PhrasesTab:CreateButton({
    Name = "I OWN YOU (Pretty much broken rn)",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("I OWN YOU")
    end,
})

PhrasesTab:CreateButton({
    Name = "CUM IN ME",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("CUM IN ME")
    end,
})

PhrasesTab:CreateButton({
    Name = "discord.gg/cDVWbBdMDe for free nudes",
    Callback = function()
        print("Fix Bypasses functionality executed!")
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("ḍịṣc̣ọṛḍ.ɢɢ/cḌṾẈḅḄḍṂḌe for free ṇụḍẹṣ")
    end,
})

-- Features Tab
local FeaturesTab = Window:CreateTab("Features", 4483362458)

FeaturesTab:CreateParagraph({
    Title = "Premium Features",
    Content = "Enjoy our brand-new premium features, including More words, More Phrases, Auto Bypass (soon), and more!"
})]]

-- Footer
Rayfield:Notify({
    Title = "UI Loaded",
    Content = "SolarHub has loaded successfully!",
    Duration = 5,
    Image = 4483362458,
    Actions = { -- Notification buttons
        Okay = {
            Name = "Okay",
            Callback = function()
                print("Notification confirmed!")
            end
        }
    }
})
